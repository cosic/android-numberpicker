buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
    }
}
apply plugin: 'android-library'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
}

android {
    compileSdkVersion 17
    buildToolsVersion "19.1.0"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    lintOptions {
        abortOnError false
    }
}

def xamarinProjectName = "android-numberpicker"
task xamarinPrepare << {
    def packageDir = "${buildDir}/xamarin/" + xamarinProjectName
    def libsDir = "${project.projectDir}/libs"
    def sourceDir = "${project.projectDir}"
    copy {
        from sourceDir + "/res"
        into packageDir + "/res"
    }
    copy {
        from sourceDir + "/AndroidManifest.xml"
        into packageDir + "/bin"
    }
    copy {
        from zipTree("${buildDir}/intermediates/bundles/release/classes.jar")
        exclude '**/*.java'
        into packageDir + "/bin/" + xamarinProjectName
    }
}

task xamarinZipLibraries (type: Zip, dependsOn: xamarinPrepare) {
    def packageDir = "${buildDir}/xamarin/" + xamarinProjectName
    extension 'jar'
    from fileTree(packageDir + "/bin/" + xamarinProjectName)
    destinationDir file(packageDir + "/bin/")
    doLast{
        delete packageDir + "/bin/" + xamarinProjectName
    }
}

task xamarinZip (type: Zip, dependsOn: xamarinZipLibraries) {
    def packageDir = "${buildDir}/xamarin/" + xamarinProjectName
    extension 'zip'
    from fileTree(packageDir)
    destinationDir file("${buildDir}/xamarin")
    doLast{
        delete packageDir
    }
}

check.dependsOn("xamarinZip")
